{
  "nodes": [
    {
      "parameters": {
        "content": "## 🚀 MULTI-PLATFORM SETUP - START HERE\n\n### What This Workflow Does\nMonitors Bluesky, Mastodon, AND/OR Reddit for disinformation threats. Choose which platforms to monitor in the first node!\n\n### Supported Platforms (FREE APIs!)\n✅ **Bluesky** - Free AT Protocol API\n✅ **Mastodon** - Free REST API  \n✅ **Reddit** - Free API (rate limited)\n\n### Quick Setup (10 minutes)\n\n**1. Choose Your Platforms**\n- Node: \"Platform Selector\"\n- Check the boxes for platforms you want to monitor\n- You can select multiple platforms!\n\n**2. Configure Each Platform**\n\n**Bluesky:**\n- Node: \"Fetch Bluesky Posts\"\n- No auth required for public search!\n- Replace `[YourBrand]` with your search term\n- Searches public posts\n\n**Mastodon:**\n- Node: \"Fetch Mastodon Posts\"\n- Choose your instance (default: mastodon.social)\n- Replace `[YourBrand]` with search term\n- No auth required for public search\n\n**Reddit:**\n- Node: \"Fetch Reddit Posts\"\n- Replace `[YourBrand]` with search term or subreddit\n- No auth required for public search\n- Searches titles + body text\n\n**3. Slack Configuration**\n- Same as original - create webhook\n- Channels: #alerts-critical, #alerts-general\n\n**4. Test Each Platform**\n- Enable only one platform checkbox\n- Click Execute\n- Verify data flows through\n- Repeat for each platform\n\n### Threat Scoring (Same as Original)\n- 0-29: Low (no alert)\n- 30-49: Medium (monitor)\n- 50-69: High (alert)\n- 70+: Critical (urgent alert)",
        "height": 820,
        "width": 540
      },
      "id": "15b10aec-7549-4f1f-b122-a0e59e96e686",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1792,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "90aa0baa-8309-4dd5-9a89-a3588365d1ca",
      "name": "Every 30 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -1232,
        544
      ],
      "typeVersion": 1,
      "notes": "Triggers workflow every 30 minutes. Adjust based on your needs."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "platform_bluesky",
              "name": "enableBluesky",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "platform_mastodon",
              "name": "enableMastodon",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "platform_reddit",
              "name": "enableReddit",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "search_term",
              "name": "searchTerm",
              "value": "[YourBrand]",
              "type": "string"
            },
            {
              "id": "mastodon_instance",
              "name": "mastodonInstance",
              "value": "mastodon.social",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d12034f9-de85-4c13-b899-7fefdc69c4b8",
      "name": "Platform Selector",
      "type": "n8n-nodes-base.set",
      "position": [
        -1008,
        544
      ],
      "typeVersion": 3.4,
      "notes": "🔧 CONFIGURE: Set which platforms to monitor. Replace [YourBrand] with your search term. Choose Mastodon instance."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "bluesky_enabled",
              "leftValue": "={{ $json.enableBluesky }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a22dc816-b743-407b-9baf-05c7a08594c0",
      "name": "Bluesky Enabled?",
      "type": "n8n-nodes-base.if",
      "position": [
        -784,
        448
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "=https://public.api.bsky.app/xrpc/app.bsky.feed.searchPosts?q={{ $json.searchTerm }}&limit=50",
        "options": {}
      },
      "id": "f3ef6fcd-2c14-4b1f-8a5f-66c088da828b",
      "name": "Fetch Bluesky Posts",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -560,
        368
      ],
      "typeVersion": 4.2,
      "notes": "Fetches posts from Bluesky using free public API. No authentication required!"
    },
    {
      "parameters": {
        "jsCode": "// Normalize Bluesky data to common format\nconst results = [];\nconst data = $input.first().json;\n\nif (data.posts && Array.isArray(data.posts)) {\n  for (const post of data.posts) {\n    const author = post.author || {};\n    const record = post.record || {};\n    const text = (record.text || '').toLowerCase();\n    \n    // Calculate account age\n    const createdAt = new Date(author.createdAt || Date.now());\n    const accountAge = Math.floor((Date.now() - createdAt.getTime()) / (1000 * 60 * 60 * 24));\n    \n    results.push({\n      json: {\n        platform: 'bluesky',\n        id: post.uri,\n        text: text,\n        fullText: record.text || '',\n        author: author.handle || 'unknown',\n        authorFollowers: author.followersCount || 0,\n        authorFriends: author.followsCount || 0,\n        authorCreated: author.createdAt || new Date().toISOString(),\n        authorTweets: author.postsCount || 0,\n        retweetCount: post.repostCount || 0,\n        favoriteCount: post.likeCount || 0,\n        createdAt: post.indexedAt || new Date().toISOString(),\n        url: `https://bsky.app/profile/${author.handle}/post/${post.uri.split('/').pop()}`,\n        accountAge: accountAge,\n        threatScore: 0,\n        redFlags: [],\n        checks: {}\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "f8bd13f0-abcd-4cee-9d2f-4692e4da1880",
      "name": "Normalize Bluesky Data",
      "type": "n8n-nodes-base.code",
      "position": [
        -352,
        368
      ],
      "typeVersion": 2,
      "notes": "Converts Bluesky format to standardized structure for analysis"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "mastodon_enabled",
              "leftValue": "={{ $json.enableMastodon }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "810899dd-7522-473b-9a35-06f5fcaeaf75",
      "name": "Mastodon Enabled?",
      "type": "n8n-nodes-base.if",
      "position": [
        -784,
        656
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "=https://{{ $json.mastodonInstance }}/api/v2/search?q={{ $json.searchTerm }}&type=statuses&limit=40",
        "options": {}
      },
      "id": "3087aebd-171f-4f9a-a061-e17dc15b3a16",
      "name": "Fetch Mastodon Posts",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -560,
        576
      ],
      "typeVersion": 4.2,
      "notes": "Fetches toots from Mastodon. Default: mastodon.social. Change instance in Platform Selector."
    },
    {
      "parameters": {
        "jsCode": "// Normalize Mastodon data to common format\nconst results = [];\nconst data = $input.first().json;\n\nif (data.statuses && Array.isArray(data.statuses)) {\n  for (const status of data.statuses) {\n    const account = status.account || {};\n    \n    // Remove HTML tags from content\n    const cleanText = (status.content || '').replace(/<[^>]*>/g, '').toLowerCase();\n    const fullText = (status.content || '').replace(/<[^>]*>/g, '');\n    \n    // Calculate account age\n    const createdAt = new Date(account.created_at || Date.now());\n    const accountAge = Math.floor((Date.now() - createdAt.getTime()) / (1000 * 60 * 60 * 24));\n    \n    results.push({\n      json: {\n        platform: 'mastodon',\n        id: status.id,\n        text: cleanText,\n        fullText: fullText,\n        author: account.username || 'unknown',\n        authorFollowers: account.followers_count || 0,\n        authorFriends: account.following_count || 0,\n        authorCreated: account.created_at || new Date().toISOString(),\n        authorTweets: account.statuses_count || 0,\n        retweetCount: status.reblogs_count || 0,\n        favoriteCount: status.favourites_count || 0,\n        createdAt: status.created_at || new Date().toISOString(),\n        url: status.url || status.uri,\n        accountAge: accountAge,\n        threatScore: 0,\n        redFlags: [],\n        checks: {}\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "e8b20908-3877-4dc6-9e85-59c581edb618",
      "name": "Normalize Mastodon Data",
      "type": "n8n-nodes-base.code",
      "position": [
        -352,
        576
      ],
      "typeVersion": 2,
      "notes": "Converts Mastodon format to standardized structure, strips HTML from content"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "reddit_enabled",
              "leftValue": "={{ $json.enableReddit }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3c53cd73-f72e-4982-89fb-af2dd1ade615",
      "name": "Reddit Enabled?",
      "type": "n8n-nodes-base.if",
      "position": [
        -784,
        848
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "=https://www.reddit.com/search.json?q={{ $json.searchTerm }}&limit=50&sort=new",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "n8n-workflow/1.0"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "60286cad-1e4b-4f5b-adc8-25bcd276fc03",
      "name": "Fetch Reddit Posts",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -560,
        768
      ],
      "typeVersion": 4.2,
      "notes": "Fetches Reddit posts. Free API with rate limits. User-Agent required."
    },
    {
      "parameters": {
        "jsCode": "// Normalize Reddit data to common format\nconst results = [];\nconst data = $input.first().json;\n\nif (data.data && data.data.children && Array.isArray(data.data.children)) {\n  for (const child of data.data.children) {\n    const post = child.data || {};\n    \n    // Combine title and selftext for full content\n    const fullText = `${post.title || ''} ${post.selftext || ''}`;\n    const text = fullText.toLowerCase();\n    \n    // Calculate account age from created_utc\n    const accountAge = Math.floor((Date.now() - (post.created_utc * 1000)) / (1000 * 60 * 60 * 24));\n    \n    // Reddit doesn't expose user stats publicly via this endpoint\n    // We'll use post-level metrics instead\n    \n    results.push({\n      json: {\n        platform: 'reddit',\n        id: post.id,\n        text: text,\n        fullText: fullText,\n        author: post.author || 'unknown',\n        authorFollowers: 0, // Not available in public API\n        authorFriends: 0, // Not available\n        authorCreated: new Date(post.created_utc * 1000).toISOString(),\n        authorTweets: 0, // Not available\n        retweetCount: 0, // Reddit doesn't have retweets\n        favoriteCount: post.score || 0, // Use score as engagement metric\n        numComments: post.num_comments || 0,\n        createdAt: new Date(post.created_utc * 1000).toISOString(),\n        url: `https://reddit.com${post.permalink}`,\n        subreddit: post.subreddit,\n        accountAge: accountAge,\n        threatScore: 0,\n        redFlags: [],\n        checks: {}\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "7fc86ae6-a30e-411e-950e-be7e100a2940",
      "name": "Normalize Reddit Data",
      "type": "n8n-nodes-base.code",
      "position": [
        -352,
        768
      ],
      "typeVersion": 2,
      "notes": "Converts Reddit format to standardized structure. Combines title + body for analysis."
    },
    {
      "parameters": {
        "mode": "combine",
        "options": {}
      },
      "id": "2dadbe70-4e2f-4f2b-af65-051a6f1d1857",
      "name": "Merge All Platforms",
      "type": "n8n-nodes-base.merge",
      "position": [
        -128,
        544
      ],
      "typeVersion": 3,
      "notes": "Combines data from all enabled platforms into single stream for analysis"
    },
    {
      "parameters": {
        "jsCode": "// EMOTIONAL MANIPULATION DETECTION (+25 points)\n// Same as original - works across all platforms\n\nconst emotionalWords = ['shocking','terrifying','alarming','dangerous','threat','crisis','panic','scared','afraid','horror','terror','frightening','outrageous','disgusting','furious','enraged','angry','hate','rage','hostile','violent','attack','destroy','scandal','corrupt','evil','traitor','criminal','betrayal','enemy','fraud','scam','lie','liar','fake','breaking','urgent','emergency','alert','warning','exposed','leaked','revealed','bombshell','explosive'];\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  let score = 0;\n  const flags = [];\n  let count = 0;\n  const found = [];\n  \n  emotionalWords.forEach(w => {\n    if (data.text.includes(w)) {\n      count++;\n      found.push(w);\n    }\n  });\n  \n  if (count >= 2) {\n    score += 25;\n    flags.push(`Emotional manipulation: ${count} triggers (${found.slice(0,3).join(', ')})`);\n  }\n  \n  results.push({\n    json: {\n      ...data,\n      checks: {\n        ...data.checks,\n        emotional: {\n          score: score,\n          flags: flags,\n          count: count\n        }\n      }\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "7114d863-646a-4d0b-8ccc-d29c0fad6d96",
      "name": "Check Emotional Words",
      "type": "n8n-nodes-base.code",
      "position": [
        96,
        304
      ],
      "typeVersion": 2,
      "notes": "Detects fear/anger language. 2+ triggers = 25 points. Works on all platforms."
    },
    {
      "parameters": {
        "jsCode": "// HEDGE WORDS / UNVERIFIED CLAIMS DETECTION (+15 points)\n// Same as original - platform agnostic\n\nconst hedgeWords = ['allegedly','reportedly','supposedly','rumor','rumors','sources say','sources claim','heard that','they say','according to','claims that','suggests that','could be','might be','may have','possibly','probably','apparently','seemingly'];\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  let score = 0;\n  const flags = [];\n  let count = 0;\n  const found = [];\n  \n  hedgeWords.forEach(w => {\n    if (data.text.includes(w)) {\n      count++;\n      found.push(w);\n    }\n  });\n  \n  if (count >= 1) {\n    score += 15;\n    flags.push(`Unverified language: \"${found[0]}\"`);\n  }\n  \n  results.push({\n    json: {\n      ...data,\n      checks: {\n        ...data.checks,\n        hedges: {\n          score: score,\n          flags: flags,\n          count: count\n        }\n      }\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "f2e620d2-fb8f-4d4b-a0d0-ddab619ede6e",
      "name": "Check Hedge Words",
      "type": "n8n-nodes-base.code",
      "position": [
        96,
        432
      ],
      "typeVersion": 2,
      "notes": "Detects speculation language. 1+ match = 15 points."
    },
    {
      "parameters": {
        "jsCode": "// CALL-TO-ACTION / AMPLIFICATION DETECTION (+20 points)\n// Adapted for multiple platforms\n\nconst ctaPhrases = ['share this','retweet','rt this','boost this','spread the word','everyone needs','must see','wake up','open your eyes','dont let them','before they delete','they dont want you','tag someone','share if you agree','pass it on','viral','make this go viral','upvote this','reblog'];\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  let score = 0;\n  const flags = [];\n  let count = 0;\n  const found = [];\n  \n  ctaPhrases.forEach(w => {\n    if (data.text.includes(w)) {\n      count++;\n      found.push(w);\n    }\n  });\n  \n  if (count >= 1) {\n    score += 20;\n    flags.push(`Call-to-action: \"${found[0]}\"`);\n  }\n  \n  results.push({\n    json: {\n      ...data,\n      checks: {\n        ...data.checks,\n        cta: {\n          score: score,\n          flags: flags,\n          count: count\n        }\n      }\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "6df50fa6-d7c6-4473-b2e8-9d15350ebbe6",
      "name": "Check Call-to-Action",
      "type": "n8n-nodes-base.code",
      "position": [
        96,
        560
      ],
      "typeVersion": 2,
      "notes": "Detects viral amplification language. Includes platform-specific terms (boost, reblog, upvote)."
    },
    {
      "parameters": {
        "jsCode": "// BEHAVIORAL TACTICS DETECTION (+25 points max)\n// Adapted for platform differences\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  let score = 0;\n  const flags = [];\n  \n  // Hashtag stuffing: 5+ hashtags (Twitter, Mastodon, Bluesky)\n  // Not applicable to Reddit which doesn't use hashtags the same way\n  if (data.platform !== 'reddit') {\n    const hashtags = (data.text.match(/#/g) || []).length;\n    if (hashtags >= 5) {\n      score += 15;\n      flags.push(`Hashtag stuffing: ${hashtags} tags`);\n    }\n  }\n  \n  // Excessive caps: 3+ words in ALL CAPS (all platforms)\n  const capsWords = data.fullText.match(/\\b[A-Z]{4,}\\b/g) || [];\n  if (capsWords.length >= 3) {\n    score += 10;\n    flags.push(`Excessive CAPS: ${capsWords.length} words`);\n  }\n  \n  results.push({\n    json: {\n      ...data,\n      checks: {\n        ...data.checks,\n        behavioral: {\n          score: score,\n          flags: flags,\n          capsWords: capsWords.length\n        }\n      }\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "3c06ac54-3f91-41f3-bfe3-b06ff4920203",
      "name": "Check Behavioral Tactics",
      "type": "n8n-nodes-base.code",
      "position": [
        96,
        672
      ],
      "typeVersion": 2,
      "notes": "Hashtag stuffing (Twitter/Mastodon/Bluesky) and CAPS (all platforms)"
    },
    {
      "parameters": {
        "jsCode": "// BOT DETECTION (+95 points max)\n// Adapted for different platforms with available metrics\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  const accountAge = data.accountAge || 0;\n  let score = 0;\n  const flags = [];\n  \n  // Platform-specific bot detection\n  if (data.platform === 'bluesky' || data.platform === 'mastodon') {\n    // NEW ACCOUNT + HIGH ACTIVITY\n    if (accountAge < 30 && data.authorTweets > 500) {\n      score += 30;\n      flags.push(`Bot: New account (${accountAge}d) with ${data.authorTweets} posts`);\n    }\n    \n    // SUSPICIOUS USERNAME PATTERN (numbers)\n    if (/[0-9]{6,}$/.test(data.author)) {\n      score += 20;\n      flags.push('Bot: Username ends with 6+ numbers');\n    }\n    \n    // LOW FOLLOWER RATIO\n    const ratio = data.authorFollowers / (data.authorFriends || 1);\n    if (ratio < 0.1 && data.authorFollowers < 50) {\n      score += 20;\n      flags.push(`Bot: Low follower ratio ${ratio.toFixed(2)}`);\n    }\n    \n    // SUSPICIOUS ENGAGEMENT\n    const engagement = data.retweetCount + data.favoriteCount;\n    if (data.authorFollowers < 100 && engagement > 500) {\n      score += 25;\n      flags.push('Bot: Suspicious engagement');\n    }\n  } else if (data.platform === 'reddit') {\n    // Reddit-specific bot signals (limited data available)\n    \n    // SUSPICIOUS USERNAME PATTERN\n    if (/[0-9]{6,}$/.test(data.author) || /^[A-Z][a-z]+[A-Z][a-z]+[0-9]{4}$/.test(data.author)) {\n      score += 25;\n      flags.push('Bot: Suspicious username pattern');\n    }\n    \n    // VERY NEW ACCOUNT with content\n    if (accountAge < 7) {\n      score += 20;\n      flags.push(`Bot: Very new account (${accountAge}d)`);\n    }\n    \n    // HIGH SCORE on new account (brigading signal)\n    if (accountAge < 30 && data.favoriteCount > 1000) {\n      score += 30;\n      flags.push('Bot: High score for new account');\n    }\n  }\n  \n  results.push({\n    json: {\n      ...data,\n      checks: {\n        ...data.checks,\n        bot: {\n          score: score,\n          flags: flags,\n          accountAge: accountAge\n        }\n      }\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "56ba20bc-5bf4-4bc6-90d4-084a66a2ea5f",
      "name": "Check Bot Signals",
      "type": "n8n-nodes-base.code",
      "position": [
        96,
        800
      ],
      "typeVersion": 2,
      "notes": "Platform-adapted bot detection. Uses available metrics from each platform."
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {}
          ]
        },
        "options": {}
      },
      "id": "5c6528ab-f808-4843-b196-895bd41f428c",
      "name": "Merge All Checks",
      "type": "n8n-nodes-base.merge",
      "position": [
        320,
        544
      ],
      "typeVersion": 2.1,
      "notes": "Combines all 5 parallel checks back together"
    },
    {
      "parameters": {
        "jsCode": "// TOTAL THREAT SCORING\n// Same as original - platform agnostic\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  const checks = data.checks || {};\n  \n  let totalScore = 0;\n  const allFlags = [];\n  \n  if (checks.emotional) {\n    totalScore += checks.emotional.score;\n    allFlags.push(...checks.emotional.flags);\n  }\n  if (checks.hedges) {\n    totalScore += checks.hedges.score;\n    allFlags.push(...checks.hedges.flags);\n  }\n  if (checks.cta) {\n    totalScore += checks.cta.score;\n    allFlags.push(...checks.cta.flags);\n  }\n  if (checks.behavioral) {\n    totalScore += checks.behavioral.score;\n    allFlags.push(...checks.behavioral.flags);\n  }\n  if (checks.bot) {\n    totalScore += checks.bot.score;\n    allFlags.push(...checks.bot.flags);\n  }\n  \n  let threatLevel = 'low';\n  let threatType = 'normal';\n  \n  if (totalScore >= 70) {\n    threatLevel = 'critical';\n    threatType = 'likely_campaign';\n  } else if (totalScore >= 50) {\n    threatLevel = 'high';\n    threatType = 'suspicious';\n  } else if (totalScore >= 30) {\n    threatLevel = 'medium';\n    threatType = 'monitor';\n  }\n  \n  results.push({\n    json: {\n      ...data,\n      threatScore: totalScore,\n      redFlags: allFlags,\n      threatLevel: threatLevel,\n      threatType: threatType,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "cb88bb6e-7743-421d-96d3-6fe63ce93688",
      "name": "Calculate Total Threat",
      "type": "n8n-nodes-base.code",
      "position": [
        544,
        544
      ],
      "typeVersion": 2,
      "notes": "Sums all threat scores. Same thresholds as original."
    },
    {
      "parameters": {
        "jsCode": "// VOLUME PATTERN & CAMPAIGN DETECTION\n// Adapted for multi-platform monitoring\n\nconst staticData = $getWorkflowStaticData('global');\nconst now = new Date();\nconst hourKey = now.getHours();\n\nif (!staticData.hourlyData) {\n  staticData.hourlyData = {};\n}\n\nif (!staticData.hourlyData[hourKey]) {\n  staticData.hourlyData[hourKey] = {\n    count: 0,\n    suspicious: 0,\n    accounts: [],\n    platforms: {}\n  };\n}\n\nconst results = [];\nconst currentHour = staticData.hourlyData[hourKey];\nconst allItems = $input.all();\n\nallItems.forEach(item => {\n  currentHour.count++;\n  \n  if (item.json.threatLevel === 'high' || item.json.threatLevel === 'critical') {\n    currentHour.suspicious++;\n  }\n  \n  const accountKey = `${item.json.platform}:${item.json.author}`;\n  if (!currentHour.accounts.includes(accountKey)) {\n    currentHour.accounts.push(accountKey);\n  }\n  \n  // Track per-platform volume\n  if (!currentHour.platforms[item.json.platform]) {\n    currentHour.platforms[item.json.platform] = 0;\n  }\n  currentHour.platforms[item.json.platform]++;\n});\n\nlet campaignDetected = false;\nlet campaignReason = '';\n\n// High concentration of suspicious posts\nif (currentHour.suspicious >= 5) {\n  campaignDetected = true;\n  campaignReason = `${currentHour.suspicious} suspicious posts this hour`;\n}\n\n// Sudden volume spike\nconst previousHour = staticData.hourlyData[(hourKey - 1 + 24) % 24];\nif (previousHour && currentHour.count > previousHour.count * 3) {\n  campaignDetected = true;\n  campaignReason = `3x spike vs previous hour (${currentHour.count} vs ${previousHour.count})`;\n}\n\n// Multiple new accounts posting (cross-platform coordination)\nconst newAccounts = allItems.filter(i => i.json.accountAge < 30).length;\nif (newAccounts >= 3) {\n  campaignDetected = true;\n  campaignReason = `${newAccounts} new accounts posting across platforms`;\n}\n\nallItems.forEach(item => {\n  results.push({\n    json: {\n      ...item.json,\n      volumeData: {\n        hourlyCount: currentHour.count,\n        hourlySuspicious: currentHour.suspicious,\n        uniqueAccounts: currentHour.accounts.length,\n        platformBreakdown: currentHour.platforms,\n        campaignDetected: campaignDetected,\n        campaignReason: campaignReason\n      },\n      shouldAlert: item.json.threatLevel !== 'low' || campaignDetected\n    }\n  });\n});\n\nreturn results;"
      },
      "id": "e5e6f77f-cd29-49b4-87a4-5d7250fe61b3",
      "name": "Check Volume Pattern",
      "type": "n8n-nodes-base.code",
      "position": [
        768,
        544
      ],
      "typeVersion": 2,
      "notes": "Multi-platform campaign detection. Tracks cross-platform coordination."
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.shouldAlert }}",
              "value2": true
            }
          ]
        }
      },
      "id": "b8f145ff-d800-43f8-83af-8627e1494171",
      "name": "Should Alert?",
      "type": "n8n-nodes-base.if",
      "position": [
        976,
        544
      ],
      "typeVersion": 1,
      "notes": "Routes based on threat level and campaign detection"
    },
    {
      "parameters": {
        "jsCode": "// ALERT MESSAGE FORMATTING\n// Enhanced for multi-platform support\n\nconst item = $input.item.json;\nconst emoji = {\n  critical: '🚨',\n  high: '⚠️',\n  medium: '🔍',\n  low: '📝'\n};\n\nconst platformEmoji = {\n  bluesky: '🦋',\n  mastodon: '🐘',\n  reddit: '🤖'\n};\n\nlet message = `${emoji[item.threatLevel]} **${item.threatLevel.toUpperCase()} THREAT DETECTED**\\n`;\nmessage += `${platformEmoji[item.platform] || '📱'} **Platform:** ${item.platform.toUpperCase()}\\n\\n`;\n\nif (item.platform === 'reddit') {\n  message += `**Subreddit:** r/${item.subreddit}\\n`;\n  message += `**Author:** u/${item.author}\\n`;\n  message += `**Score:** ${item.favoriteCount} | Comments: ${item.numComments || 0}\\n`;\n} else {\n  message += `**Account:** @${item.author}\\n`;\n  message += `**Followers:** ${item.authorFollowers} | Account Age: ${item.accountAge}d\\n`;\n  message += `**Engagement:** ${item.retweetCount + item.favoriteCount}\\n`;\n}\n\nmessage += `**Threat Score:** ${item.threatScore}/100\\n\\n`;\n\nif (item.redFlags.length > 0) {\n  message += `**🚩 Red Flags Detected:**\\n`;\n  item.redFlags.forEach(flag => {\n    message += `• ${flag}\\n`;\n  });\n  message += `\\n`;\n}\n\nif (item.volumeData.campaignDetected) {\n  message += `**🎯 POSSIBLE CAMPAIGN: ${item.volumeData.campaignReason}**\\n`;\n  if (item.volumeData.platformBreakdown) {\n    message += `Platforms active: ${Object.keys(item.volumeData.platformBreakdown).join(', ')}\\n\\n`;\n  }\n}\n\nmessage += `**Content:**\\n> ${item.fullText.substring(0, 280)}\\n\\n`;\nmessage += `**View Original:** ${item.url}\\n\\n`;\nmessage += `_Activity this hour: ${item.volumeData.hourlyCount} posts, ${item.volumeData.hourlySuspicious} suspicious_`;\n\nreturn {\n  json: {\n    ...item,\n    alertMessage: message,\n    slackChannel: item.threatLevel === 'critical' ? 'alerts-critical' : 'alerts-general'\n  }\n};"
      },
      "id": "2e301561-dc6a-4d0d-8ebf-5df93819c52b",
      "name": "Format Alert",
      "type": "n8n-nodes-base.code",
      "position": [
        1200,
        448
      ],
      "typeVersion": 2,
      "notes": "Formats platform-specific alerts with platform emoji and relevant metrics"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $json.slackChannel }}",
          "mode": "name"
        },
        "text": "={{ $json.alertMessage }}",
        "otherOptions": {}
      },
      "id": "a25565a8-a33b-4a74-b42d-021fa54bcd36",
      "name": "Send Alert",
      "type": "n8n-nodes-base.slack",
      "position": [
        1424,
        448
      ],
      "typeVersion": 2.3,
      "webhookId": "d8fb4eaa-bd69-4b7d-a79c-cdcdf3d4b3f5",
      "notes": "🔧 CONFIGURE: Add Slack webhook credentials"
    },
    {
      "parameters": {},
      "id": "c8463a59-3111-40ad-93e7-a6f51d927051",
      "name": "No Alert",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1200,
        640
      ],
      "typeVersion": 1,
      "notes": "Low-threat posts end here"
    },
    {
      "parameters": {
        "content": "## 🌐 PLATFORM-SPECIFIC NOTES\n\n**Bluesky (🦋)**\n- Free public API\n- No authentication needed\n- Very similar to Twitter structure\n- All metrics available\n\n**Mastodon (🐘)**\n- Decentralized, choose instance\n- Free public API\n- Default: mastodon.social\n- Try: mas.to, fosstodon.org\n- Content includes HTML tags (auto-stripped)\n\n**Reddit (🤖)**\n- Free JSON API\n- Rate limited (60 req/min)\n- User metrics not public\n- Focus on post-level signals\n- Username patterns still useful\n- \"score\" = upvotes - downvotes\n\n**Bot Detection Adaptations:**\n- Bluesky/Mastodon: Full metrics\n- Reddit: Username patterns, account age, engagement anomalies only",
        "height": 560,
        "width": 380
      },
      "id": "c0fe55dd-ef98-4eca-9f91-cd46d6e2f01f",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1248,
        944
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 🔍 THREAT ANALYSIS\n\nSame 5 checks as original:\n1. Emotional manipulation\n2. Hedge words\n3. Call-to-action\n4. Behavioral tactics\n5. Bot signals\n\nAdapted for platform differences where needed.",
        "height": 260,
        "width": 360
      },
      "id": "78705ee8-e045-4163-b978-dfb6fe358f79",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        944
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 📡 DATA COLLECTION\n\nEnable/disable platforms in Platform Selector node.\n\nData flows:\n1. Check if platform enabled\n2. Fetch from API\n3. Normalize to common format\n4. Merge all platforms\n5. Run through analysis",
        "height": 220,
        "width": 300
      },
      "id": "c1d75730-b359-4320-b3c2-31a0de7b8774",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -784,
        944
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Every 30 Minutes": {
      "main": [
        [
          {
            "node": "Platform Selector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Platform Selector": {
      "main": [
        [
          {
            "node": "Bluesky Enabled?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mastodon Enabled?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reddit Enabled?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bluesky Enabled?": {
      "main": [
        [
          {
            "node": "Fetch Bluesky Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Bluesky Posts": {
      "main": [
        [
          {
            "node": "Normalize Bluesky Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Bluesky Data": {
      "main": [
        [
          {
            "node": "Merge All Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mastodon Enabled?": {
      "main": [
        [
          {
            "node": "Fetch Mastodon Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Mastodon Posts": {
      "main": [
        [
          {
            "node": "Normalize Mastodon Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Mastodon Data": {
      "main": [
        [
          {
            "node": "Merge All Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reddit Enabled?": {
      "main": [
        [
          {
            "node": "Fetch Reddit Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Reddit Posts": {
      "main": [
        [
          {
            "node": "Normalize Reddit Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Reddit Data": {
      "main": [
        [
          {
            "node": "Merge All Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge All Platforms": {
      "main": [
        [
          {
            "node": "Check Emotional Words",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Hedge Words",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Call-to-Action",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Behavioral Tactics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Bot Signals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Emotional Words": {
      "main": [
        [
          {
            "node": "Merge All Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Hedge Words": {
      "main": [
        [
          {
            "node": "Merge All Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Call-to-Action": {
      "main": [
        [
          {
            "node": "Merge All Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Behavioral Tactics": {
      "main": [
        [
          {
            "node": "Merge All Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Bot Signals": {
      "main": [
        [
          {
            "node": "Merge All Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge All Checks": {
      "main": [
        [
          {
            "node": "Calculate Total Threat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Total Threat": {
      "main": [
        [
          {
            "node": "Check Volume Pattern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Volume Pattern": {
      "main": [
        [
          {
            "node": "Should Alert?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Alert?": {
      "main": [
        [
          {
            "node": "Format Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Alert": {
      "main": [
        [
          {
            "node": "Send Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "5dc6e67c991cf2e3caadd6e211fa62501b73fb5108da2f896f5710ae50bc2723"
  }
}
